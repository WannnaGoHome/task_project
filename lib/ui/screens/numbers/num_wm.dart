// ignore_for_file: avoid_print

import 'package:elementary/elementary.dart';
import 'package:elementary_helper/elementary_helper.dart';
import 'package:flutter/material.dart';
import 'package:practise/core/di/service_locator.dart';
import 'package:practise/data/repositories/number_repository.dart';
import 'num_model.dart';
import 'num_screen.dart';
import 'package:injectable/injectable.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart';
import 'package:timezone/data/latest.dart';


@injectable
class NumbersWidgetModel extends WidgetModel<NumbersScreen, NumbersModel>
{
  final TextEditingController numberController;
  final StateNotifier<String> factText;
  final NumberRepository numberRepository;

  final FlutterLocalNotificationsPlugin notificationsPlugin = FlutterLocalNotificationsPlugin();

    //TODO done DIO Interceptor –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    // Interceptor (–ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫) ‚Äî —ç—Ç–æ –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –¥–ª—è –≤–∞—à–∏—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤. 
    // –û–Ω —Å—Ç–æ–∏—Ç –º–µ–∂–¥—É –≤–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏–∑–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.
    // –ë–µ–∑ Interceptor: –í—ã —Å–∞–º–∏ –∑–≤–æ–Ω–∏—Ç–µ –≤ –±–∞–Ω–∫ ‚Üí –≥–æ–≤–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–∞–Ω–Ω—ã–µ ‚Üí –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç
    // –° Interceptor: –£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π:
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—à ID –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
      // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏
      // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∫–æ–≥–¥–∞ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–≤–∞—é—Ç
    // –ó–∞—á–µ–º –Ω—É–∂–Ω—ã Interceptors?
      // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - Request Interceptor
      // class AuthInterceptor extends Interceptor {
      //   @override
      //   void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
      //     options.headers['Authorization'] = 'Bearer –≤–∞—à_—Ç–æ–∫–µ–Ω_—Ç—É—Ç';
      //     super.onRequest(options, handler);
      //   }
      // }
      // 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - Request Interceptor, Response Interceptor
      // class LoggingInterceptor extends Interceptor {
      //   @override
      //   void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
      //     print('‚Üí –ó–∞–ø—Ä–æ—Å: ${options.method} ${options.uri}');
      //     super.onRequest(options, handler);
      //   }

      //   @override
      //   void onResponse(Response response, ResponseInterceptorHandler handler) {
      //     print('‚Üê –û—Ç–≤–µ—Ç: ${response.statusCode} ${response.data}');
      //     super.onResponse(response, handler);
      //   }
      // }
      // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - Error Interceptor
      // class TokenRefreshInterceptor extends Interceptor {
      //   @override
      //   void onError(DioException err, ErrorInterceptorHandler handler) async {
      //     if (err.response?.statusCode == 401) {
      //       // –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª - –æ–±–Ω–æ–≤–ª—è–µ–º
      //       final newToken = await refreshToken();
      //       // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      //       err.requestOptions.headers['Authorization'] = 'Bearer $newToken';
      //       final response = await dio.fetch(err.requestOptions);
      //       return handler.resolve(response);
      //     }
      //     super.onError(err, handler);
      //   }
      // }

  // TODO done dio_smart_retry
  // TODO local_notifications 
    
  @factoryMethod
  NumbersWidgetModel(
    NumbersModel model,
    this.numberRepository,) 
      : numberController = TextEditingController(),
        factText = StateNotifier<String>(initValue: '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à —Ñ–∞–∫—Ç'),
        super(model);

  @override
  void initWidgetModel() {
    super.initWidgetModel();
    init();
  }

  Future<void> init() async {
    initializeTimeZones();

    setLocalLocation(
      getLocation('Asia/Almaty'),
    );
    const androidSettings = AndroidInitializationSettings('ic_notification');
    const DarwinInitializationSettings iosSettings = DarwinInitializationSettings();
    const InitializationSettings initializationSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );
    await notificationsPlugin.initialize(initializationSettings);

  }

  Future<void> showInstantNotification({
    required int id,
    required String title,
    required String body,
  }) async {
    await notificationsPlugin.show(id, title, body,
    const NotificationDetails(
      android: AndroidNotificationDetails('instant_notificaton_channe_id', "Instant Notifications",
      channelDescription: 'Instant notification channel',
      importance: Importance.max,
      priority: Priority.high,
      ),
      iOS: DarwinNotificationDetails(),
    ),
    );
  }

  void showSnackBar(String message) {
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }
  bool isLoading = false;

  void onShowFactPressed() async {
    if (isLoading){
      return;
    }
    final number = int.tryParse(numberController.text);
    if (number != null) {
     isLoading = true;
      final fact = await numberRepository.fetchMathFact(number);
      if(fact != null) {
        factText.accept(fact);
        showInstantNotification(id: 0, title: '–§–∞–∫—Ç ‚Ññ$number', body: fact);
      }
      else {
        showSnackBar('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç');
      }
      isLoading = false;
    }
    else{
      showSnackBar('Enter a number');
    }
  }

  void onRandomFactPressed() async {
    if (isLoading){
      return;
    }
    isLoading = true;
    final fact = await numberRepository.fetchRandomTrivia();
    if (fact != null) {
      factText.accept(fact);
    }
    else {
      showSnackBar('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç');
    }
    isLoading = false;
  }

  void onGetErrorPressed() async {
    print('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Smart Retry...');
    try {
      final response = await numberRepository.getServerError();
      if (response!= null) {
        print('–û—à–∏–±–∫–∞ 500');
      }
    } catch (e) {
      print('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ retry: $e');
    }
  }


  
}

NumbersWidgetModel createNumbersWidgetModel(BuildContext context) {
  return NumbersWidgetModel(
    NumbersModel(),
    getIt<NumberRepository>(),
  );
}
