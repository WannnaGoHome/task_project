
import 'dart:developer';

import 'package:elementary/elementary.dart';
import 'package:elementary_helper/elementary_helper.dart';
import 'package:flutter/material.dart';
import 'package:practise/core/di/service_locator.dart';
import 'package:practise/data/repositories/number_repository.dart';
import 'num_model.dart';
import 'num_screen.dart';
import 'package:injectable/injectable.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart';
import 'package:timezone/data/latest.dart';


@injectable
class NumbersWidgetModel extends WidgetModel<NumbersScreen, NumbersModel>
{
  final TextEditingController numberController;
  final StateNotifier<String> factText;
  final NumberRepository numberRepository;

  final FlutterLocalNotificationsPlugin notificationsPlugin = FlutterLocalNotificationsPlugin();

    //TODO done DIO Interceptor –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    // Interceptor (–ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫) ‚Äî —ç—Ç–æ –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç–∞—Ä—å –¥–ª—è –≤–∞—à–∏—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤. 
    // –û–Ω —Å—Ç–æ–∏—Ç –º–µ–∂–¥—É –≤–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏–∑–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.
    // –ë–µ–∑ Interceptor: –í—ã —Å–∞–º–∏ –∑–≤–æ–Ω–∏—Ç–µ –≤ –±–∞–Ω–∫ ‚Üí –≥–æ–≤–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–∞–Ω–Ω—ã–µ ‚Üí –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç
    // –° Interceptor: –£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π:
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—à ID –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
      // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏
      // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∫–æ–≥–¥–∞ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–≤–∞—é—Ç
    // –ó–∞—á–µ–º –Ω—É–∂–Ω—ã Interceptors?
      // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - Request Interceptor
      // class AuthInterceptor extends Interceptor {
      //   @override
      //   void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
      //     options.headers['Authorization'] = 'Bearer –≤–∞—à_—Ç–æ–∫–µ–Ω_—Ç—É—Ç';
      //     super.onRequest(options, handler);
      //   }
      // }
      // 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - Request Interceptor, Response Interceptor
      // class LoggingInterceptor extends Interceptor {
      //   @override
      //   void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
      //     log('‚Üí –ó–∞–ø—Ä–æ—Å: ${options.method} ${options.uri}');
      //     super.onRequest(options, handler);
      //   }

      //   @override
      //   void onResponse(Response response, ResponseInterceptorHandler handler) {
      //     log('‚Üê –û—Ç–≤–µ—Ç: ${response.statusCode} ${response.data}');
      //     super.onResponse(response, handler);
      //   }
      // }
      // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - Error Interceptor
      // class TokenRefreshInterceptor extends Interceptor {
      //   @override
      //   void onError(DioException err, ErrorInterceptorHandler handler) async {
      //     if (err.response?.statusCode == 401) {
      //       // –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª - –æ–±–Ω–æ–≤–ª—è–µ–º
      //       final newToken = await refreshToken();
      //       // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      //       err.requestOptions.headers['Authorization'] = 'Bearer $newToken';
      //       final response = await dio.fetch(err.requestOptions);
      //       return handler.resolve(response);
      //     }
      //     super.onError(err, handler);
      //   }
      // }

  // TODO done dio_smart_retry
  // TODO local_notifications 
  // TODO firebase messaging
  //
  //Firebase —ç—Ç–æ –æ–±–ª–∞—á–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ç –≥—É–≥–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç
  //–±—ã—Å—Ç—Ä–µ–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫–∏–µ-—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  //–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫, remote config, cloud storage,
  //cloud database. –ë–ª–∞–≥–æ–¥–∞—Ä—á—è –Ω–µ–º—É –Ω–µ –Ω—É–∂–Ω–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ 
  //–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö  

//   –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Firebase Messaging (FCM)
  // 1. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—É—à–µ–π
  // FCM –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–µ–Ω (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –º–Ω–æ–≥–∏—Ö —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤).
  // –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ Google ‚Üí –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∏–ª–ª–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

  // 2. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  // Notification messages ‚Äî –ø—Ä–æ—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (title, body, –∏–∫–æ–Ω–∫–∞). Android —Å–∞–º –∏—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ.
  // Data messages ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (data: {...}), –∫–æ—Ç–æ—Ä—É—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å —Å–∞–º –≤ Dart/Kotlin/Java.
  // –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏ notification, –∏ data –≤–º–µ—Å—Ç–µ).

  // üëâ –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
  // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "–∏–∑ –∫–æ—Ä–æ–±–∫–∏",
  // –∏–ª–∏ –¥–µ–ª–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, –∫–∞—Å—Ç–æ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è).

  // 3. –†–∞–±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ –∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  // –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí FCM –º–æ–∂–µ—Ç "—Ä–∞–∑–±—É–¥–∏—Ç—å" –µ–≥–æ —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—à.
  // –î–ª—è data-—Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onBackgroundMessage.

  // 4. –ì–∏–±–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥
  // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—à–∏:
  // –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø–æ FCM-—Ç–æ–∫–µ–Ω—É),
  // –Ω–∞ –≥—Ä—É–ø–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤,
  // –ø–æ —Ç–µ–º–∞–º (subscribeToTopic("news")),
  // —á–µ—Ä–µ–∑ —É—Å–ª–æ–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "topicA" && !"topicB").
  // –í –∫–æ–Ω—Å–æ–ª–∏ Firebase –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏ –±–µ–∑ –±—ç–∫–µ–Ω–¥–∞.

  // 5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ Firebase
  // Firebase Analytics ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏–π –ø—É—à–µ–π, CTR –∏ —Ç.–¥.
  // Firebase A/B Testing ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –ø—É—à–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã).
  // Firebase Remote Config ‚Äî –º–µ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—à–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

  // 6. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  // Android, iOS, Web ‚Üí –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
  // –ù–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –∫–∞–∂–¥—É—é –û–°.

  // 7. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ—Ç–∞
  // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Google –±–µ—Ä—ë—Ç —ç—Ç–æ –Ω–∞ —Å–µ–±—è).
  // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å FCM —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—à.

  // üîπ –ö–æ–≥–¥–∞ FCM –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω
    // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å (—á–∞—Ç—ã, —Ç–∞—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä—ã, –∑–∞–º–µ—Ç–∫–∏).
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    // –ï—Å–ª–∏ –≤–∞–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ (–∞–∫—Ü–∏–∏, –Ω–æ–≤–æ—Å—Ç–∏).
    // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ).


    
  @factoryMethod
  NumbersWidgetModel(
    NumbersModel model,
    this.numberRepository,) 
      : numberController = TextEditingController(),
        factText = StateNotifier<String>(initValue: '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à —Ñ–∞–∫—Ç'),
        super(model);

  @override
  void initWidgetModel() {
    super.initWidgetModel();
    init();
  }

  Future<void> init() async {
    initializeTimeZones();

    setLocalLocation(
      getLocation('Asia/Almaty'),
    );
    const androidSettings = AndroidInitializationSettings('ic_notification');
    const DarwinInitializationSettings iosSettings = DarwinInitializationSettings();
    const InitializationSettings initializationSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );
    await notificationsPlugin.initialize(initializationSettings);

  }

  Future<void> showInstantNotification({
    required int id,
    required String title,
    required String body,
  }) async {
    await notificationsPlugin.show(id, title, body,
    const NotificationDetails(
      android: AndroidNotificationDetails('instant_notificaton_channe_id', "Instant Notifications",
      channelDescription: 'Instant notification channel',
      importance: Importance.max,
      priority: Priority.high,
      ),
      iOS: DarwinNotificationDetails(),
    ),
    );
  }

  void showSnackBar(String message) {
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }
  bool isLoading = false;

  void onShowFactPressed() async {
    if (isLoading){
      return;
    }
    final number = int.tryParse(numberController.text);
    if (number != null) {
     isLoading = true;
      final fact = await numberRepository.fetchMathFact(number);
      if(fact != null) {
        factText.accept(fact);
        showInstantNotification(id: 0, title: '–§–∞–∫—Ç ‚Ññ$number', body: fact);
      }
      else {
        showSnackBar('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç');
      }
      isLoading = false;
    }
    else{
      showSnackBar('Enter a number');
    }
  }

  void onRandomFactPressed() async {
    if (isLoading){
      return;
    }
    isLoading = true;
    final fact = await numberRepository.fetchRandomTrivia();
    if (fact != null) {
      factText.accept(fact);
    }
    else {
      showSnackBar('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç');
    }
    isLoading = false;
  }

  void onGetErrorPressed() async {
    log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Smart Retry...');
    try {
      final response = await numberRepository.getServerError();
      if (response!= null) {
        log('–û—à–∏–±–∫–∞ 500');
      }
    } catch (e) {
      log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ retry: $e');
    }
  }


  
}

NumbersWidgetModel createNumbersWidgetModel(BuildContext context) {
  return NumbersWidgetModel(
    NumbersModel(),
    getIt<NumberRepository>(),
  );
}
